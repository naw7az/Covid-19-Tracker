{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","attribution","url","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","casesPerOneMillion","recoveredPerOneMillion","deathsPerOneMillion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80b4fd6c.chunk.js","sourcesContent":["// just type 'rfce'(react functional component export) and press enter\r\n\r\nimport React from 'react';\r\nimport './InfoBox.css';\r\nimport {\r\n\tCard,\r\n\tCardContent,\r\n\tTypography\r\n} from '@material-ui/core';\r\n\r\n\r\nfunction InfoBox({title, cases, isRed, active, total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography className=\"title\" color=\"textSecondary\">{title}</Typography>\r\n                \r\n                {/* Number of Cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases} / m</h2>\r\n\r\n                {/* Total cases */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {Circle, Popup} from 'react-leaflet';\r\n\r\n// this dictionary is created at random, you can change it\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n// sort the dropdown based on number of cases\r\nexport const sortData = (data) => {\r\n    const sortData = [...data];\r\n\r\n    sortData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// DRAW circles on the map with interactive tooltop\r\nexport const showDataOnMap = (data, casesType = 'cases') => \r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className='info-container'>\r\n                    <div\r\n                        className='info-flag'\r\n                        style={{backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className='info-name'>{country.country}</div>\r\n                    <div className='info-confirmed'>Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className='info-recovered'>Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className='info-deaths'>Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n\r\n            </Popup>\r\n        </Circle>\r\n    ));\r\n","import React from 'react';\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from './util';\r\n// changing the name of Map because our file and fucntion got the same name\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\r\n\r\nfunction Map({countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {/* Loop through countries and draw circles on the screen */}\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className='table'>\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong> {numeral(cases).format(\"0,0\")} </strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\n// options is pre defined in chart.js documentation, it is needed for the\r\n// design that we see in the graph\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    // when u hover over graph it will show value\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\")\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: 'll'\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LineGraph({ casesType='cases', ...props}) {\r\n    const [data, setData] = useState({});\r\n    // \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n\r\n    const buildChartData = (data, casesType='cases') => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    // total cases today - total cases yesterday = jump in cases\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // clever stuff here\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            })\r\n        }\r\n        \r\n        fetchData();\r\n\r\n    }, [casesType])\r\n\r\n    return (\r\n        <div className= {props.className}>\r\n            {/* if data exist */}\r\n            {data?.length > 0 && (\r\n            <Line \r\n                options={options}\r\n                data= {{\r\n                    datasets: [\r\n                        {\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: data,\r\n                        }\r\n                    ]\r\n                }}\r\n            />\r\n            )}      \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, {useState, useEffect} from 'react';\nimport {\n\tMenuItem,\n\tFormControl,\n\tSelect,\n\tCard,\n\tCardContent\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport './App.css';\nimport Table from './Table';\nimport {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\n\nfunction App() {\n\t// STATE = variable in REACT(var for JS: state for REACT) <<<<<\n\tconst [countries, setCountries] = useState([\"USA\", 'India']);\n\tconst [country, setCountry] = useState('worldwide');\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\t// the lattitude and logitude are the coordinate of centre of north atlantic ocean\n\tconst [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\n\t// USEEFFECT = Rus a piece of code based on a given condition \n\tuseEffect(() => {\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t.then(response => response.json())\n\t\t.then(data => {\n\t\t\tsetCountryInfo(data);\n\t\t})\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// The code inside here will run once when the component([countries]) loads\n\t\t// and not again until the component value changes\n\t\t// async -> send a request, wait for it, do something with it\n\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\t// map function is doing the loop\n\t\t\t\tconst countries = data.map((country) => (\n\t\t\t\t\t{\n\t\t\t\t\t\tname: country.country, // United States\n\t\t\t\t\t\tvalue: country.countryInfo.iso2, // US\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\tsetTableData(sortedData);\n\t\t\t\tsetMapCountries(data);\n\t\t\t\tsetCountries(countries);\n\n\t\t\t});\n\t\t};\n\n\t\tgetCountriesData();\n\n\t}, [countries]);\n\n\t// this functions run whenever we change the country\n\tconst onCountryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\t\t\n\t\tconst url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n\t\tawait fetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\tsetCountry(countryCode);\n\t\t\t// All of the data from the country\n\t\t\tsetCountryInfo(data);\n\t\t\tif (countryCode=== 'worldwide') {\n\t\t\t\tsetMapCenter([34.80746, -40.4796]);\n\t\t\t} else {\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t}\n\t\t\t\n\t\t\tsetMapZoom(4);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">  \n\t\t\t\t{/* Header */}\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1> COVID-19 TRACKER </h1>\n\t\t\t\t\t{/* Title + Select input dropdown field */}\n\t\t\t\t\t<FormControl className='app__dropdown'>\n\t\t\t\t\t\t<Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n\t\t\t\t\t\t\t{/* Loops through all the countries and show drop down*/}\n\t\t\t\t\t\t\t<MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map(country=> (\n\t\t\t\t\t\t\t\t<MenuItem value={country.value}>{country.name}</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t{/* Stats */}\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox \n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType==='cases'}\n\t\t\t\t\t\tonClick={e => setCasesType('cases')}\n\t\t\t\t\t\ttitle=\"Coronavirus Cases\" \n\t\t\t\t\t\tcases={countryInfo.casesPerOneMillion} \n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)} \t\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox \n\t\t\t\t\t\tactive={casesType==='recovered'}\n\t\t\t\t\t\tonClick={e => setCasesType('recovered')}\n\t\t\t\t\t\ttitle=\"Recovered\" \n\t\t\t\t\t\tcases={countryInfo.recoveredPerOneMillion} \n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)} \n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox \n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType==='deaths'}\n\t\t\t\t\t\tonClick={e => setCasesType('deaths')}\n\t\t\t\t\t\ttitle=\"Deaths\" \n\t\t\t\t\t\tcases={countryInfo.deathsPerOneMillion} \n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)} \n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Map */}\n\t\t\t\t<Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\t\t\t</div> \n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t{/* Table */}\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t{/* Graph */}\n\t\t\t\t\t<h3 className='app__graphTitle'>Worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph className='app__graph' casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}